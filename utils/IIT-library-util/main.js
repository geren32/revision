//=============================================================================
const express = require('express');
const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
/* Підключення бібліотек JavaScript */
var fs = require('fs');

eval(fs.readFileSync('./utils/IIT-library-util/lib/euscpt.js')+'');
eval(fs.readFileSync('./utils/IIT-library-util/lib/euscpm.js')+'');
eval(fs.readFileSync('./utils/IIT-library-util/lib/euscp.js')+'');

//=============================================================================

/* Налаштування серверів ЦСК */
var g_CAs = "./utils/IIT-library-util/data/CAs.Test.json"

/* Масив з шляхом до кореневих сертификатів ЦЗО та ЦСК */
var g_CACerts = [
	"./utils/IIT-library-util/data/CACertificates.Test.p7b",
];

/* Налаштування ЦСК за замовчанням */
var g_CADefaultSettings = {
	"issuerCNs": 				["Акредитований центр сертифікації ключів ІДД ДФС",
								"Акредитований центр сертифікації ключів ІДД Міндоходів",
								"Акредитований центр сертифікації ключів ІДД ДПС"],
	"address": 					"acskidd.gov.ua",
	"ocspAccessPointAddress":	"acskidd.gov.ua/services/ocsp/",
	"ocspAccessPointPort":		"80",
	"cmpAddress":				"acskidd.gov.ua",
	"tspAddress":				"acskidd.gov.ua",
	"tspAddressPort":			"80",
	"directAccess":				true
};

//-----------------------------------------------------------------------------

/* Налаштування ос. ключа */
var g_PKey = {
	filePath: "./utils/IIT-library-util/data/Key-6.dat",	/* Шлях до файлу з ос. ключем */
	password: "12345677",			/* Пароль до файлу з ос. ключем */
	certificates: [			/* Масив з шляхами до файлів сертифікатів ос. ключа */
	],
	CACommonName: "Тестовий ЦСК АТ \"ІІТ\"" /*Ім'я ЦСК, що видав сертифікат ос. ключа*/
};

//-----------------------------------------------------------------------------

var g_euSign = null;
var g_isLibraryLoaded = false;

//=============================================================================

/* Ініціалізація налаштувань криптографічної бібліотеки */
function SetSettings(CAs, CASettings) {
	var offline = true;
	var useOCSP = false;
	var useCMP = false;

	offline = ((CASettings == null) ||
		(CASettings.address == "")) ?
		true : false;
	useOCSP = (!offline && (CASettings.ocspAccessPointAddress != ""));
	useCMP = (!offline && (CASettings.cmpAddress != ""));

	g_euSign.SetJavaStringCompliant(true);

	var settings = g_euSign.CreateFileStoreSettings();
	settings.SetPath('');
	settings.SetSaveLoadedCerts(false);
	g_euSign.SetFileStoreSettings(settings);

	settings = g_euSign.CreateModeSettings();
	settings.SetOfflineMode(offline);
	g_euSign.SetModeSettings(settings);

	settings = g_euSign.CreateProxySettings();
	g_euSign.SetProxySettings(settings);

	settings = g_euSign.CreateTSPSettings();
	settings.SetGetStamps(!offline);
	if (!offline) {
		if (CASettings.tspAddress != "") {
			settings.SetAddress(CASettings.tspAddress);
			settings.SetPort(CASettings.tspAddressPort);
		} else if (g_CADefaultSettings){
			settings.SetAddress(g_CADefaultSettings.tspAddress);
			settings.SetPort(g_CADefaultSettings.tspAddressPort);
		}
	}
	g_euSign.SetTSPSettings(settings);

	settings = g_euSign.CreateOCSPSettings();
	if (useOCSP) {
		settings.SetUseOCSP(true);
		settings.SetBeforeStore(true);
		settings.SetAddress(CASettings.ocspAccessPointAddress);
		settings.SetPort("80");
	}
	g_euSign.SetOCSPSettings(settings);

	settings = g_euSign.CreateOCSPAccessInfoModeSettings();
	settings.SetEnabled(true);
	g_euSign.SetOCSPAccessInfoModeSettings(settings);
	settings = g_euSign.CreateOCSPAccessInfoSettings();
	for (var i = 0; i < CAs.length; i++) {
		settings.SetAddress(CAs[i].ocspAccessPointAddress);
		settings.SetPort(CAs[i].ocspAccessPointPort);

		for (var j = 0; j < CAs[i].issuerCNs.length; j++) {
			settings.SetIssuerCN(CAs[i].issuerCNs[j]);
			g_euSign.SetOCSPAccessInfoSettings(settings);
		}
	}

	settings = g_euSign.CreateCMPSettings();
	settings.SetUseCMP(useCMP);
	if (useCMP) {
		settings.SetAddress(CASettings.cmpAddress);
		settings.SetPort("80");
	}
	g_euSign.SetCMPSettings(settings);

	settings = g_euSign.CreateLDAPSettings();
	g_euSign.SetLDAPSettings(settings);
}

//-----------------------------------------------------------------------------

/* Імпорт сертифікатів до сховища криптографічної бібліотеки */
function LoadCertificates(certsFilePathes) {
	if (!certsFilePathes)
		return;

	for (var i = 0; i < certsFilePathes.length; i++) {
		var path = certsFilePathes[i];
		var data = new Uint8Array(fs.readFileSync(path));
		if (path.substr(path.length - 3) == 'p7b') {
			g_euSign.SaveCertificates(data);
		} else {
			g_euSign.SaveCertificate(data);
		}
	}
}

//-----------------------------------------------------------------------------

/* Зчитування особистого ключа */
/* Ос. ключ використовується в функціях накладання підпису, зашифрування та */
/* розшифрування даних */
function ReadPrivateKey(pKeyFilePath, password, certsFilePathes) {
	/* Імпорт сертифікатів ос. ключа */
	LoadCertificates(certsFilePathes);
	/* Зчитування ключа */
	var pKeyData = new Uint8Array(fs.readFileSync(pKeyFilePath));
	g_euSign.ReadPrivateKeyBinary(pKeyData, password)
}

//-----------------------------------------------------------------------------

/* Ініціалізація криптографічної бібліотеки та встановлення налаштувань */
function Initialize(readPrivKey) {
	/* Перевірка необхідності ініціалізації криптографічної бібліотеки */
	if (!g_euSign.IsInitialized()) {
		/* Ініціалізація криптографічної бібліотеки */
		g_euSign.Initialize();
	}

	/* Перевірка необхідності встановлення налаштувань крипт. бібліотеки */
	if (g_euSign.DoesNeedSetSettings()) {
		/* Зчитування файлу з налаштуваннями ЦСК */
		var CAs = JSON.parse(fs.readFileSync(g_CAs), 'utf8');

		/* Отримання налаштувань ЦСК для ос. ключа */
		var CASettings = null;
		for (var i = 0; i < CAs.length; i++) {
			for (var j = 0; j < CAs[i].issuerCNs.length; j++) {
				if (g_PKey.CACommonName == CAs[i].issuerCNs[j]) {
					CASettings = CAs[i];
					break;
				}
			}

			if (CASettings)
				break;
		}

		/* Встановлення параметрів за замовчанням */
		SetSettings(CAs, CASettings);

		/* Завантаження сертифікатів ЦСК */
		LoadCertificates(g_CACerts);
	}

	if (readPrivKey) {
		/* Перевірка чи зчитано ос. ключ */
		if (!g_euSign.IsPrivateKeyReaded()) {
			/* Зчитування ос. ключа */
			ReadPrivateKey(g_PKey.filePath, g_PKey.password,
				g_PKey.certificates);
		}
	}
}


function VerifyHash(hash, sign) {
	if (!g_isLibraryLoaded)
		throw "Library not loaded";

	Initialize(false);

	return g_euSign.VerifyHash(hash, sign);
}


//=============================================================================

/* Функція викликається після завантаження бібліотеки */
/* Функції бібліотеки можна викликати тільки після виклику EUSignCPModuleInitialized */
function EUSignCPModuleInitialized(isInitialized) {
	console.log('*******************************')
	g_isLibraryLoaded = isInitialized;
	console.log(isInitialized);

	/* Приклад відображення інф. про підпис */
	var _printSignInfo = function(signInfo) {
		var signerInfo = signInfo.GetOwnerInfo();
		var signTimeInfo = signInfo.GetTimeInfo();
		console.log("Sign info:");
		console.log("Signer info:");
		console.log("\tSubject CN:" + signerInfo.GetSubjCN());
		console.log("\tCA:" + signerInfo.GetIssuerCN());
		console.log("\tSN:" + signerInfo.GetSerial());

		if (signTimeInfo.IsTimeAvail()) {
			console.log((signTimeInfo.IsTimeStamp() ?
				"\tTime stamp (from data):" :
				"\tSign time:") + signTimeInfo.GetTime());
		} else {
			console.log("\tSign time: not available");
		}

		if (signTimeInfo.IsSignTimeStampAvail()) {
			console.log("\tTime stamp (from sign):" +
				signTimeInfo.GetSignTimeStamp());
		}
	}
}

//=============================================================================

var g_euSign = EUSignCP();

//=============================================================================


app.post('/', function (req, res) {
	console.log(`Start IIT function VerifyHashSign`);

	let { hash, signature } = req.body;


	try {
		// let b64string = '';
		//
		// let ress = Buffer.from(b64string, 'base64').toString('ascii');
		//
		// ress = JSON.parse(ress);
		//
		// let hash = 'oMI8kG9G9Inm1AhNPq6Akj5VaosHJubuRgTM+lZAFbo=';

		let signInfo = VerifyHash(hash, signature);
		// _printSignInfo(signInfo);
		console.log(`End IIT function VerifyHashSign`);
		return res.status(200).json(signInfo);
	} catch (err) {
		console.log(err);
		// log.error(`${err}`);
	}

});

app.listen(3050, function () {
	console.log('LISTENING IIT LIBRARY...');
})

// module.exports = {
//
// 	VerifyHashSign: (hash, signature) => {
// 		log.info(`Start IIT function VerifyHashSign`);
// 		try {
//
//
// 			let signInfo = VerifyHash('oMI8kG9G9Inm1AhNPq6Akj5VaosHJubuRgTM+lZAFbo=', ress.signedItems[0].signature);
//
// 			// _printSignInfo(signInfo);
// 			log.info(`End IIT function VerifyHashSign`);
// 			return signInfo;
// 		} catch (err) {
// 			console.log(err)
// 			log.error(`${err}`);
// 		}
//
// 	}
//
// }

module.exports = app;
